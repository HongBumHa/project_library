<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.dgit.project_library.dao.UsersDao">

	<resultMap type="Users" id="UserResult">
		<id property="userId" column="user_id" />
		<result property="userName" column="user_name" />
		<result property="userPw" column="user_pw" />
		<result property="userAddr" column="user_addr" />
		<result property="userTel" column="user_tel" />
		<result property="userEmail" column="user_email" />
		<result property="delayDay" column="delay_day" />
		<result property="rankCode" column="rank_code" />
		<result property="userLeave" column="user_leave" />
	</resultMap>

	<!-- 유저 전체 검색 -->
	<sql id="selectSql">
		select * from users
	</sql>

	<select id="selectUserByAll" resultMap="UserResult">
		<include refid="selectSql" />
	</select>

	<sql id="whereSql">
		<where>
			<if test="userId !=null">
				user_id = #{userId}
			</if>
		</where>
	</sql>
	<select id="selectUsersByNo" resultType="Users">
		<include refid="selectSql" />
		<include refid="whereSql" />
	</select>
	<!-- 유저 생성 -->
	<sql id="insertSql">
		insert into users(user_id, user_name, user_pw, user_addr,
		user_tel, user_email, delay_day, rank_code,user_leave)
		values(#{userId},#{userName},#{userPw},#{userAddr},#{userTel},#{userEmail},#{delayDay},#{rankCode},#{userLeave})
	</sql>

	<insert id="insertUser" parameterType="Users">
		<include refid="insertSql" />
	</insert>

	<!-- 유저 삭제 -->
	<sql id="deleteSql">
		delete from users where user_id = #{userId}
	</sql>
	<delete id="deleteUsers" parameterType="Users">
		<include refid="deleteSql" />
	</delete>

	<!-- 유저 업데이트 -->
	<sql id="updateSql">
		update users set user_name = #{userName},
		user_pw =
		#{userPw},
		user_addr = #{userAddr},
		user_tel = #{userTel},
		user_email =
		#{userEmail},
		delay_day = #{delayDay},
		rank_code = #{rankCode},
		user_leave = #{userLeave}
		where user_id = #{userId}
	</sql>
	<update id="updateUser" parameterType="Users">
		<include refid="updateSql" />
	</update>


	<sql id="selectUserListSql">
		select 
		user_id,user_name,user_addr,user_tel,user_email,user_leave, r.rank_name 
		from users u, userrank r 
		
	</sql>
	<sql id="whereSql2">
		<where>
			u.rank_code = r.rank_code
			<if test="userId != null">
				and user_id like #{userId}
			</if>
			<if test="userAddr != null">
				and user_addr like #{userAddr}
			</if>
			<if test="userTel != null">
				and user_tel like #{userTel}
			</if>
			<if test="userEmail != null">
				and user_email like #{userEmail}
			</if>
			<if test="userName != null">
				and user_name like #{userName}
			</if>
			<if test="userLeave != null">
				and user_leave = #{userLeave}
			</if>
		</where>
	</sql>
	<resultMap type="Users" id="UserListResult">
		<id property="userId" column="user_id" />
		<result property="userName" column="user_name" />
		<result property="userAddr" column="user_addr" />
		<result property="userTel" column="user_tel" />
		<result property="userEmail" column="user_email" />
		<result property="userLeave" column="user_leave" />
		<result property="userLeave" column="user_leave" />
		<result property="rankCode" column="rank_name" />
	</resultMap>
	<select id="selectByUserList" parameterType="map" resultMap="UserListResult">
		<include refid="selectUserListSql" />
		<include refid="whereSql2" />
	</select>
</mapper>